<?xml version="1.0" encoding="UTF-8"?>

<launch>

  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find wheelchair_model)/urdf/wheelchair_diffdrive.xacro'" />

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
  </node>

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>

  <!-- launch file for the world with the modelled apartment walls -->
  <!--include file="$(find gazebo_ros_world)/launch/my_world.launch"/--> 

  <!-- test world launcher -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" default="$(find wheelchair_model)/world/test_world.world" />
          <node name="gazebo" pkg="gazebo_ros" type="gazebo" args="$(arg my_world)"/>
        <arg name="paused" value="true" />
        <arg name="use_sim_time" value="true" />
        <arg name="gui" value="true" />
        <arg name="verbose" value="true" />
  </include> 

  <!-- starting position -->
  <arg name="x" default='0'/>
  <arg name="y" default='0'/>
  <arg name="z" default='0.20'/>
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        args=" -x $(arg x) -y $(arg y) -z $(arg z) -unpause -urdf 
        -model wheelchair_robot -param robot_description" respawn="false" output="screen" />


  <arg name="rvizconfig" default="$(find wheelchair_model)/config/wheelchair_diffdrive.rviz" />
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />
  
  <node pkg="tf" type="static_transform_publisher" name="world_to_base_link_transform" args="0.48 0 -0.12 0 0 0 1 /base_link /world 5"/>

  <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="laser_scan_filter">
    <rosparam command="load" file="$(find wheelchair_model)/config/in_place_scan_filter.yaml"/>
    <param name="target_frame" type="string" value="base_link"/>
  </node>

  <node pkg="cancel_current_goals_service" type="cancel_goal_service.py" name="cancel_move_base_goal_service" />
  <node pkg="cancel_current_goals_service" type="cancel_goal_service_toggleable_vel_lock.py" name="cancel_move_base_goal_toggleable_service" />

  <node pkg="slam_toolbox" type="async_slam_toolbox_node" name="slam_toolbox" output="screen">
    <rosparam command="load" file="$(find wheelchair_model)/config/mapper_params_online_async.yaml" />
  </node>

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find wheelchair_model)/config/common_costmap_config.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find wheelchair_model)/config/common_costmap_config.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find wheelchair_model)/config/local_costmap.yaml" command="load"/>
    <rosparam file="$(find wheelchair_model)/config/global_costmap.yaml" command="load"/>
    <!--rosparam file="$(find wheelchair_model)/config/base_planner_config.yaml" command="load"/-->
    <rosparam file="$(find wheelchair_model)/config/move_base.yaml" command="load"/>
    <remap from="cmd_vel" to="discard_vel"/>
  </node>

  <node pkg="twist_mux" type="twist_mux" name="twist_mux" output="screen">
    <rosparam file="$(find wheelchair_model)/config/twist_mux_topics.yaml" command="load"/>
    <rosparam file="$(find wheelchair_model)/config/twist_mux_locks.yaml" command="load"/>
  </node>

  <node pkg="wheelchair_model" name="local_goals" type="NavfnROS_path_listener.py"/> 

  <arg name="ns" default="local_planner"/>

    <!-- param -->
    <arg name="hz" default="20"/>
    <arg name="subscribe_count_th" default="3"/>
    <arg name="sleep_time_after_finish" default="0.5"/>
    <arg name="use_scan_as_input" default="true"/>
    <arg name="use_footprint" default="false"/>
    <arg name="use_path_cost" default="false"/>
    <arg name="robot_param" default="$(find wheelchair_model)/config/robot_param.yaml"/>
    <arg name="dwa_param" default="$(find wheelchair_model)/config/dwa_param.yaml"/>
    <!-- topic name -->
    <arg name="cmd_vel" default="/local_vel"/>
    <arg name="dist_to_goal_th" default="/dist_to_goal_th"/>
    <arg name="path" default="/path"/>
    <arg name="footprint" default="/footprint"/>
    <arg name="local_goal" default="/local_goal"/>
    <arg name="local_map" default="/move_base/local_costmap/costmap"/>
    <arg name="odom" default="/odom"/>
    <arg name="scan" default="/scan_filtered"/>
    <arg name="target_velocity" default="/target_velocity"/>

    <!-- run dwa_planner node -->
    <node pkg="dwa_planner" type="dwa_planner" name="dwa_planner" ns="$(arg ns)">
        <!-- param -->
        <rosparam command="load" file="$(arg robot_param)"/>
        <rosparam command="load" file="$(arg dwa_param)"/>
        <param name="HZ" value="$(arg hz)"/>
        <param name="USE_SCAN_AS_INPUT" value="$(arg use_scan_as_input)"/>
        <param name="USE_FOOTPRINT" value="$(arg use_footprint)"/>
        <param name="USE_PATH_COST" value="$(arg use_path_cost)"/>
        <param name="SUBSCRIBE_COUNT_TH" value="$(arg subscribe_count_th)"/>
        <param name="SLEEP_TIME_AFTER_FINISH" value="$(arg sleep_time_after_finish)"/>
        <!-- topic name -->
        <remap from="/cmd_vel" to="$(arg cmd_vel)"/>
        <remap from="/dist_to_goal_th" to="$(arg dist_to_goal_th)"/>
        <remap from="/path" to="$(arg path)"/>
        <remap from="/footprint" to="$(arg footprint)"/>
        <remap from="/local_goal" to="$(arg local_goal)"/>
        <remap from="/local_map" to="$(arg local_map)"/>
        <remap from="/odom" to="$(arg odom)"/>
        <remap from="/scan" to="$(arg scan)"/>
        <remap from="/target_velocity" to="$(arg target_velocity)"/>
    </node>

</launch>